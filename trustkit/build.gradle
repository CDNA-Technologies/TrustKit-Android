
apply plugin: 'com.android.library'

ext {

    libraryDescription = 'TrustKit Android is an open source library that makes it easy to deploy SSL public key ' +
            'pinning and reporting in any Android App.'
    gitUrl = 'https://github.com/datatheorem/TrustKit-Android'
    websiteUrl = 'https://github.com/datatheorem/TrustKit-Android'

    libraryVersion = trustkitVersionName

    licenseName = 'The MIT License (MIT)'
    licenseUrl = 'https://github.com/datatheorem/TrustKit-Android/blob/master/LICENSE'
    allLicenses = ["MIT"]
}

repositories {
    mavenCentral()
}
dependencies {
    implementation "com.android.support:support-annotations:$rootProject.libVersions.android.appCompat"
    implementation "com.android.support:support-v4:$rootProject.libVersions.android.appCompat"

    androidTestImplementation "junit:junit:$rootProject.libVersions.junit"
    androidTestImplementation "com.android.support.test:runner:$rootProject.libVersions.android.testRunner"
    androidTestImplementation "com.android.support.test:rules:$rootProject.libVersions.android.testRunner"
    androidTestImplementation "org.mockito:mockito-core:$rootProject.libVersions.mockito.android"
    androidTestImplementation "org.awaitility:awaitility:3.1.6"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker:$rootProject.libVersions.dexmaker"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-dx:$rootProject.libVersions.dexmaker"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-mockito:$rootProject.libVersions.dexmaker"
    androidTestImplementation "com.squareup.okhttp3:okhttp:$rootProject.libVersions.testing.okhttp3"
    androidTestImplementation "com.google.android.gms:play-services-base:$rootProject.libVersions.testing.playServicesBase"
}

android {
    defaultConfig {
        compileSdkVersion toolVersions.android.compileSdk
        buildToolsVersion toolVersions.android.buildTools
        minSdkVersion toolVersions.android.minSdk
        versionCode trustkitVersionCode
        versionName trustkitVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

publishing {
    publications {
        aar(MavenPublication) {
            groupId rootProject.ext.sdkPackageName
            version = libraryVersion
            artifactId project.getName()

            println("========== Project Name= " + project.getName() + " ========== " + configurations.implementation.allDependencies.size())

            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar") {
                builtBy assemble
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.implementation.allDependencies.each {
                    println("===============implementation groupName  - " + it.name + " - " + it.group + " - " + it.version)
                    if (it.group != null && (it.name != null && !"unspecified".equals(it.name)) &&
                            (it.version != null && !"unspecified".equals(it.version))) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                configurations.annotationProcessor.allDependencies.each {
                    println("=============== groupName  - " + it.name + " - " + it.group + " - " + it.version)
                    if (it.group != null && (it.name != null && !"unspecified".equals(it.name)) &&
                            (it.version != null && !"unspecified".equals(it.version))) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', "provided")
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = rootProject.ext.artifactory_contextUrl
    publish {
        repository {
            repoKey = rootProject.ext.artifactory_repo_key
            username = rootProject.ext.artifactory_user
            password = rootProject.ext.artifactory_password
        }
        defaults {
            publications('aar')
            publishArtifacts = true

            properties = ['qa.level': 'basic', 'dev.team': 'core']
            publishPom = true
        }
    }
}


